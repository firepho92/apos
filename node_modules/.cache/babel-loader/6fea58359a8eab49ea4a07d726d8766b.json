{"ast":null,"code":"import { AnimationVariables, DefaultFontStyles, FontSizes, FontWeights, getGlobalClassNames, keyframes } from '../../Styling';\nvar globalClassNames = {\n  root: 'ms-TeachingBubble',\n  body: 'ms-TeachingBubble-body',\n  bodyContent: 'ms-TeachingBubble-bodycontent',\n  closeButton: 'ms-TeachingBubble-closebutton',\n  content: 'ms-TeachingBubble-content',\n  footer: 'ms-TeachingBubble-footer',\n  header: 'ms-TeachingBubble-header',\n  headerIsCondensed: 'ms-TeachingBubble-header--condensed',\n  headerIsSmall: 'ms-TeachingBubble-header--small',\n  headerIsLarge: 'ms-TeachingBubble-header--large',\n  headline: 'ms-TeachingBubble-headline',\n  image: 'ms-TeachingBubble-image',\n  primaryButton: 'ms-TeachingBubble-primaryButton',\n  secondaryButton: 'ms-TeachingBubble-secondaryButton',\n  subText: 'ms-TeachingBubble-subText',\n  // TODO: Button global class name usage should be converted to a styles function once\n  //        Button supports JS styling, which means these button names can be removed.\n  button: 'ms-Button',\n  buttonLabel: 'ms-Button-label'\n};\nvar opacityFadeIn = keyframes({\n  '0%': {\n    opacity: 0,\n    animationTimingFunction: AnimationVariables.easeFunction1,\n    transform: 'scale3d(.90,.90,.90)'\n  },\n  '100%': {\n    opacity: 1,\n    transform: 'scale3d(1,1,1)'\n  }\n});\n\nvar rootStyle = function rootStyle(isWide) {\n  return [{\n    display: 'block',\n    maxWidth: 364,\n    border: 0,\n    outline: 'transparent',\n    boxShadow: 'none !important',\n    width: 'calc(100% + 1px)',\n    animationName: \"\" + opacityFadeIn,\n    animationDuration: '300ms',\n    animationTimingFunction: 'linear',\n    animationFillMode: 'both'\n  }, isWide && {\n    maxWidth: '456px'\n  }];\n};\n\nvar headerStyle = function headerStyle(classNames, hasCondensedHeadline, hasSmallHeadline) {\n  if (hasCondensedHeadline) {\n    return [classNames.headerIsCondensed];\n  }\n\n  if (hasSmallHeadline) {\n    return [classNames.headerIsSmall, {\n      selectors: {\n        ':not(:last-child)': {\n          marginBottom: '14px'\n        }\n      }\n    }];\n  } // Large headline is default\n\n\n  return [classNames.headerIsLarge, {\n    selectors: {\n      ':not(:last-child)': {\n        marginBottom: '14px'\n      }\n    }\n  }];\n};\n\nexport var getStyles = function getStyles(props) {\n  var calloutClassName = props.calloutClassName,\n      hasCondensedHeadline = props.hasCondensedHeadline,\n      hasSmallHeadline = props.hasSmallHeadline,\n      isWide = props.isWide,\n      primaryButtonClassName = props.primaryButtonClassName,\n      secondaryButtonClassName = props.secondaryButtonClassName,\n      theme = props.theme;\n  var hasLargeHeadline = !hasCondensedHeadline && !hasSmallHeadline;\n  var palette = theme.palette;\n  var classNames = getGlobalClassNames(globalClassNames, theme);\n  return {\n    root: [classNames.root, theme.fonts.medium, calloutClassName],\n    body: [classNames.body, {\n      selectors: {\n        ':not(:last-child)': {\n          marginBottom: '20px'\n        }\n      }\n    }],\n    bodyContent: [classNames.bodyContent, {\n      padding: '20px'\n    }, isWide && {\n      maxWidth: '302px'\n    }],\n    closeButton: [classNames.closeButton, {\n      position: 'absolute',\n      right: 0,\n      top: 0,\n      color: palette.white,\n      fontSize: FontSizes.small,\n      selectors: {\n        ':hover': {\n          background: 'transparent'\n        }\n      }\n    }],\n    content: [classNames.content].concat(rootStyle(isWide), [isWide && {\n      display: 'flex'\n    }]),\n    footer: [classNames.footer, {\n      display: 'flex',\n      alignItems: 'center',\n      color: palette.white,\n      selectors: {\n        '> *:not(:first-child)': {\n          marginLeft: '20px'\n        }\n      }\n    }],\n    header: [classNames.header].concat(headerStyle(classNames, hasCondensedHeadline, hasSmallHeadline), [(hasCondensedHeadline || hasSmallHeadline) && [DefaultFontStyles.medium, {\n      marginRight: '10px',\n      fontWeight: FontWeights.semibold\n    }]]),\n    headline: [classNames.headline, {\n      margin: 0,\n      color: palette.white\n    }, hasLargeHeadline && [DefaultFontStyles.xxLarge, {\n      fontWeight: FontWeights.light\n    }]],\n    imageContent: [classNames.header, classNames.image, isWide && {\n      display: 'flex',\n      alignItems: 'center',\n      paddingLeft: '20px',\n      maxWidth: '154px'\n    }],\n    primaryButton: [classNames.primaryButton, primaryButtonClassName, {\n      backgroundColor: palette.white,\n      borderColor: palette.white,\n      whiteSpace: 'nowrap',\n      selectors: (_a = {}, // TODO: global class name usage should be converted to a button styles function once Button supports JS styling\n      _a[\".\" + classNames.buttonLabel] = [DefaultFontStyles.medium, {\n        color: palette.themePrimary\n      }], _a[':hover'] = {\n        backgroundColor: palette.themeLighter,\n        borderColor: palette.themeLighter\n      }, _a[':focus'] = {\n        backgroundColor: palette.themeLighter,\n        borderColor: palette.white\n      }, _a[':active'] = {\n        backgroundColor: palette.white,\n        borderColor: palette.white\n      }, _a)\n    }],\n    secondaryButton: [classNames.secondaryButton, secondaryButtonClassName, {\n      backgroundColor: palette.themePrimary,\n      borderColor: palette.white,\n      whiteSpace: 'nowrap',\n      selectors: (_b = {}, // TODO: global class name usage should be converted to a button styles function once Button supports JS styling\n      _b[\".\" + classNames.buttonLabel] = [DefaultFontStyles.medium, {\n        color: palette.white\n      }], _b['&:hover, &:focus'] = {\n        backgroundColor: palette.themeDarkAlt,\n        borderColor: palette.white\n      }, _b[':active'] = {\n        backgroundColor: palette.themePrimary,\n        borderColor: palette.white\n      }, _b)\n    }],\n    subText: [classNames.subText, {\n      margin: 0,\n      fontSize: FontSizes.medium,\n      color: palette.white,\n      fontWeight: FontWeights.semilight\n    }],\n    subComponentStyles: {\n      callout: {\n        root: rootStyle(isWide).concat([theme.fonts.medium]),\n        beak: [{\n          background: palette.themePrimary\n        }],\n        calloutMain: [{\n          background: palette.themePrimary\n        }]\n      }\n    }\n  };\n\n  var _a, _b;\n};","map":null,"metadata":{},"sourceType":"module"}