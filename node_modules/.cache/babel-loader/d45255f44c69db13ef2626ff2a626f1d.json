{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { css } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\n\nvar getCellText = function getCellText(item, column) {\n  var value = item && column && column.fieldName ? item[column.fieldName] : '';\n\n  if (value === null || value === undefined) {\n    value = '';\n  }\n\n  return value;\n};\n/**\n * Component for rendering a row's cells in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\n\n\nvar DetailsRowFields =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(DetailsRowFields, _super);\n\n  function DetailsRowFields(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._cellValueKeys = {};\n    return _this;\n  }\n\n  DetailsRowFields.prototype.render = function () {\n    var _a = this.props,\n        columns = _a.columns,\n        columnStartIndex = _a.columnStartIndex,\n        shimmer = _a.shimmer,\n        rowClassNames = _a.rowClassNames,\n        _b = _a.cellStyleProps,\n        cellStyleProps = _b === void 0 ? DEFAULT_CELL_STYLE_PROPS : _b,\n        item = _a.item,\n        itemIndex = _a.itemIndex,\n        onRenderItemColumn = _a.onRenderItemColumn,\n        getCellValueKey = _a.getCellValueKey,\n        cellsByColumn = _a.cellsByColumn,\n        enableUpdateAnimations = _a.enableUpdateAnimations;\n    var cellValueKeys = this._cellValueKeys;\n    return React.createElement(\"div\", {\n      className: rowClassNames.fields,\n      \"data-automationid\": \"DetailsRowFields\",\n      role: \"presentation\"\n    }, columns.map(function (column, columnIndex) {\n      var width = typeof column.calculatedWidth === 'undefined' ? 'auto' : column.calculatedWidth + cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n      var _a = column.onRender,\n          onRender = _a === void 0 ? onRenderItemColumn : _a,\n          _b = column.getValueKey,\n          getValueKey = _b === void 0 ? getCellValueKey : _b;\n      var cellContentsRender = cellsByColumn && column.key in cellsByColumn ? cellsByColumn[column.key] : onRender && !shimmer ? onRender(item, itemIndex, column) : getCellText(item, column);\n      var previousValueKey = cellValueKeys[column.key];\n      var cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : undefined;\n      var showAnimation = false;\n\n      if (cellValueKey !== undefined && previousValueKey !== undefined && cellValueKey !== previousValueKey) {\n        showAnimation = true;\n      }\n\n      cellValueKeys[column.key] = cellValueKey; // generate a key that auto-dirties when content changes, to force the container to re-render, to trigger animation\n\n      var key = \"\" + column.key + (cellValueKey !== undefined ? \"-\" + cellValueKey : '');\n      return React.createElement(\"div\", {\n        key: key,\n        role: column.isRowHeader ? 'rowheader' : 'gridcell',\n        \"aria-colindex\": columnIndex + columnStartIndex + 1,\n        className: css(column.className, column.isMultiline && rowClassNames.isMultiline, column.isRowHeader && rowClassNames.isRowHeader, column.isIconOnly && shimmer && rowClassNames.shimmerIconPlaceholder, shimmer && rowClassNames.shimmer, rowClassNames.cell, column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded, showAnimation && rowClassNames.cellAnimation),\n        style: {\n          width: width\n        },\n        \"data-automationid\": \"DetailsRowCell\",\n        \"data-automation-key\": column.key\n      }, cellContentsRender);\n    }));\n  };\n\n  return DetailsRowFields;\n}(React.PureComponent);\n\nexport { DetailsRowFields };","map":null,"metadata":{},"sourceType":"module"}