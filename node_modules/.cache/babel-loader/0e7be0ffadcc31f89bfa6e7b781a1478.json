{"ast":null,"code":"import _objectSpread from \"/Users/alexandroaguilar/Desarrollo/Backup/tiburon-master/aPOS/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/alexandroaguilar/Desarrollo/Backup/tiburon-master/aPOS/src/screens/AdminControlScreen.js\";\nimport React from 'react';\nimport { CommandBar } from 'office-ui-fabric-react/lib/CommandBar';\nimport { CommandBarButton } from 'office-ui-fabric-react/lib/Button';\nimport { DirectionalHint } from 'office-ui-fabric-react/lib/Callout';\nimport Management from '../components/Management';\nimport Incoming from '../components/Incoming';\nimport Outgoing from '../components/Outgoing';\nimport AppContext from '../context/AppContext';\n\nconst customButton = props => {\n  const buttonOnMouseClick = () => {\n    props.onClick();\n  };\n\n  return React.createElement(CommandBarButton, Object.assign({}, props, {\n    onClick: buttonOnMouseClick,\n    styles: _objectSpread({}, props.styles, {\n      textContainer: {\n        fontSize: 18\n      },\n      icon: {\n        color: '#0078d4'\n      }\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }));\n};\n\nclass AdminControlScreen extends React.Component {\n  constructor() {\n    super();\n\n    this._setView = view => {\n      this.setState({\n        view\n      });\n    };\n\n    this.getItems = () => {\n      return [{\n        key: 'general',\n        name: 'General',\n        cacheKey: 'myCacheKey',\n        // changing this key will invalidate this items cache\n        iconProps: {\n          iconName: 'Financial'\n        },\n        ariaLabel: 'General',\n        onClick: () => this._setView(0)\n      }, {\n        key: 'ingresos',\n        name: 'Ingresos',\n        cacheKey: 'myCacheKey',\n        // changing this key will invalidate this items cache\n        iconProps: {\n          iconName: 'SortDown'\n        },\n        ariaLabel: 'Ingresos',\n        onClick: () => this._setView(0)\n      }, {\n        key: 'egresos',\n        name: 'Egresos',\n        cacheKey: 'myCacheKey',\n        // changing this key will invalidate this items cache\n        iconProps: {\n          iconName: 'SortUp'\n        },\n        ariaLabel: 'Egresos',\n        onClick: () => this._setView(0)\n      }];\n    };\n\n    this.state = {\n      view: 0\n    };\n  }\n\n  render() {\n    return React.createElement(AppContext.Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, context => React.createElement(\"div\", {\n      className: \"AdminControl\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(CommandBar, {\n      overflowButtonProps: {\n        ariaLabel: 'More commands',\n        menuProps: {\n          items: [],\n          // Items must be passed for typesafety, but commandBar will determine items rendered in overflow\n          isBeakVisible: true,\n          beakWidth: 20,\n          gapSpace: 10,\n          directionalHint: DirectionalHint.topCenter\n        }\n      },\n      buttonAs: customButton,\n      items: this.getItems(),\n      ariaLabel: 'Use left and right arrow keys to navigate between commands',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), this.state.view === 0 ? React.createElement(Management, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }) : null, this.state.view === 1 ? React.createElement(Incoming, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }) : null, this.state.view === 2 ? React.createElement(Outgoing, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }) : null));\n  }\n\n}\n\nexport default AdminControlScreen;","map":{"version":3,"sources":["/Users/alexandroaguilar/Desarrollo/Backup/tiburon-master/aPOS/src/screens/AdminControlScreen.js"],"names":["React","CommandBar","CommandBarButton","DirectionalHint","Management","Incoming","Outgoing","AppContext","customButton","props","buttonOnMouseClick","onClick","styles","textContainer","fontSize","icon","color","AdminControlScreen","Component","constructor","_setView","view","setState","getItems","key","name","cacheKey","iconProps","iconName","ariaLabel","state","render","context","menuProps","items","isBeakVisible","beakWidth","gapSpace","directionalHint","topCenter"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { CommandBar } from 'office-ui-fabric-react/lib/CommandBar';\nimport { CommandBarButton } from 'office-ui-fabric-react/lib/Button';\nimport { DirectionalHint } from 'office-ui-fabric-react/lib/Callout';\nimport Management from '../components/Management';\nimport Incoming from '../components/Incoming';\nimport Outgoing from '../components/Outgoing';\nimport AppContext from '../context/AppContext';\n\nconst customButton = (props) => {\n  const buttonOnMouseClick = () => {\n    props.onClick()\n  }\n\n  return (\n    <CommandBarButton\n      {...props}\n      onClick={buttonOnMouseClick}\n      styles={{\n        ...props.styles,\n        textContainer: { fontSize: 18 },\n        icon: { color: '#0078d4' }\n      }}\n    />\n  );\n};\n\nclass AdminControlScreen extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      view: 0\n    }\n  }\n\n  _setView = (view) => {\n    this.setState({\n      view\n    });\n  }\n\n  getItems = () => {\n    return [\n      {\n        key: 'general',\n        name: 'General',\n        cacheKey: 'myCacheKey', // changing this key will invalidate this items cache\n        iconProps: {\n          iconName: 'Financial'\n        },\n        ariaLabel: 'General',\n        onClick: () => this._setView(0)\n      },\n      {\n        key: 'ingresos',\n        name: 'Ingresos',\n        cacheKey: 'myCacheKey', // changing this key will invalidate this items cache\n        iconProps: {\n          iconName: 'SortDown'\n        },\n        ariaLabel: 'Ingresos',\n        onClick: () => this._setView(0)\n      },\n      {\n        key: 'egresos',\n        name: 'Egresos',\n        cacheKey: 'myCacheKey', // changing this key will invalidate this items cache\n        iconProps: {\n          iconName: 'SortUp'\n        },\n        ariaLabel: 'Egresos',\n        onClick: () => this._setView(0)\n      }\n    ];\n  }\n\n  render() {\n    return (\n      <AppContext.Consumer>\n        {context => (\n          <div className=\"AdminControl\">\n            <CommandBar\n              overflowButtonProps={{\n                ariaLabel: 'More commands',\n                menuProps: {\n                  items: [], // Items must be passed for typesafety, but commandBar will determine items rendered in overflow\n                  isBeakVisible: true,\n                  beakWidth: 20,\n                  gapSpace: 10,\n                  directionalHint: DirectionalHint.topCenter\n                }\n              }}\n              buttonAs={customButton}\n              items={this.getItems()}\n              ariaLabel={'Use left and right arrow keys to navigate between commands'}\n            />\n            { this.state.view === 0 ? <Management/> : null }\n            { this.state.view === 1 ? <Incoming/> : null }\n            { this.state.view === 2 ? <Outgoing/> : null }\n          </div>\n        )}\n      </AppContext.Consumer>\n    );\n  }\n\n}\n\nexport default AdminControlScreen;"]},"metadata":{},"sourceType":"module"}